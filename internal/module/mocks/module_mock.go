// Code generated by MockGen. DO NOT EDIT.
// Source: ./module_interface.go

// Package module_mock is a generated GoMock package.
package module_mock

import (
	models "homework-1/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockModuleInterface is a mock of ModuleInterface interface.
type MockModuleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockModuleInterfaceMockRecorder
}

// MockModuleInterfaceMockRecorder is the mock recorder for MockModuleInterface.
type MockModuleInterfaceMockRecorder struct {
	mock *MockModuleInterface
}

// NewMockModuleInterface creates a new mock instance.
func NewMockModuleInterface(ctrl *gomock.Controller) *MockModuleInterface {
	mock := &MockModuleInterface{ctrl: ctrl}
	mock.recorder = &MockModuleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModuleInterface) EXPECT() *MockModuleInterfaceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockModuleInterface) AddOrder(orderId, customerId models.ID, expirationTime time.Time, pack models.PackageType, weight models.Kilo, cost models.Rub) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", orderId, customerId, expirationTime, pack, weight, cost)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockModuleInterfaceMockRecorder) AddOrder(orderId, customerId, expirationTime, pack, weight, cost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockModuleInterface)(nil).AddOrder), orderId, customerId, expirationTime, pack, weight, cost)
}

// GetOrders mocks base method.
func (m *MockModuleInterface) GetOrders(customerId models.ID, n int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", customerId, n)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockModuleInterfaceMockRecorder) GetOrders(customerId, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockModuleInterface)(nil).GetOrders), customerId, n)
}

// GetRefunds mocks base method.
func (m *MockModuleInterface) GetRefunds(page, limit int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefunds", page, limit)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefunds indicates an expected call of GetRefunds.
func (mr *MockModuleInterfaceMockRecorder) GetRefunds(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefunds", reflect.TypeOf((*MockModuleInterface)(nil).GetRefunds), page, limit)
}

// ReceiveOrders mocks base method.
func (m *MockModuleInterface) ReceiveOrders(ordersId []models.ID) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveOrders", ordersId)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveOrders indicates an expected call of ReceiveOrders.
func (mr *MockModuleInterfaceMockRecorder) ReceiveOrders(ordersId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveOrders", reflect.TypeOf((*MockModuleInterface)(nil).ReceiveOrders), ordersId)
}

// RefundOrder mocks base method.
func (m *MockModuleInterface) RefundOrder(customerId, orderId models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefundOrder", customerId, orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefundOrder indicates an expected call of RefundOrder.
func (mr *MockModuleInterfaceMockRecorder) RefundOrder(customerId, orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefundOrder", reflect.TypeOf((*MockModuleInterface)(nil).RefundOrder), customerId, orderId)
}

// ReturnOrder mocks base method.
func (m *MockModuleInterface) ReturnOrder(id models.ID) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", id)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockModuleInterfaceMockRecorder) ReturnOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockModuleInterface)(nil).ReturnOrder), id)
}
