// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	models "homework-1/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockStorage) AddOrder(order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStorageMockRecorder) AddOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStorage)(nil).AddOrder), order)
}

// ChangeOrder mocks base method.
func (m *MockStorage) ChangeOrder(order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrder", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOrder indicates an expected call of ChangeOrder.
func (mr *MockStorageMockRecorder) ChangeOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrder", reflect.TypeOf((*MockStorage)(nil).ChangeOrder), order)
}

// GetCustomersOrders mocks base method.
func (m *MockStorage) GetCustomersOrders(customerId models.ID) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomersOrders", customerId)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomersOrders indicates an expected call of GetCustomersOrders.
func (mr *MockStorageMockRecorder) GetCustomersOrders(customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomersOrders", reflect.TypeOf((*MockStorage)(nil).GetCustomersOrders), customerId)
}

// GetOrder mocks base method.
func (m *MockStorage) GetOrder(orderId models.ID) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", orderId)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStorageMockRecorder) GetOrder(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStorage)(nil).GetOrder), orderId)
}

// GetRefunds mocks base method.
func (m *MockStorage) GetRefunds() ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefunds")
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefunds indicates an expected call of GetRefunds.
func (mr *MockStorageMockRecorder) GetRefunds() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefunds", reflect.TypeOf((*MockStorage)(nil).GetRefunds))
}

// ReceiveOrder mocks base method.
func (m *MockStorage) ReceiveOrder(orderId models.ID) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveOrder", orderId)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveOrder indicates an expected call of ReceiveOrder.
func (mr *MockStorageMockRecorder) ReceiveOrder(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveOrder", reflect.TypeOf((*MockStorage)(nil).ReceiveOrder), orderId)
}

// ReturnOrder mocks base method.
func (m *MockStorage) ReturnOrder(orderId models.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", orderId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockStorageMockRecorder) ReturnOrder(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockStorage)(nil).ReturnOrder), orderId)
}
